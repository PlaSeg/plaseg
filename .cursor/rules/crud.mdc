---
description:
globs:
alwaysApply: false
---
# CRUD Implementation Guide

## Step 1: Define Types
First, create or update the types file in the `@types` directory to define the entity's interface.

```typescript
// src/@types/entity.ts
export interface Entity {
  id: string;
  name: string;
  description: string;
  // Add all required properties
  createdAt: Date;
  updatedAt?: Date | null;
}
```

## Step 2: Create Schema
Next, create the schema file in the `@schemas` directory using Zod for validation.

```typescript
// src/@schemas/entity.ts
import { z } from "zod";

// Schema for creating entities
export const createEntityRequestSchema = z.object({
  name: z.string().min(3, "Name must have at least 3 characters"),
  description: z.string().min(10, "Description must have at least 10 characters"),
  // Add validation for all required fields
});

export type CreateEntityRequestSchema = z.infer<typeof createEntityRequestSchema>;

// Schema for entity data from API
export const entitySchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  description: z.string(),
  // Include all fields
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date().nullable().optional(),
});

export const getEntitiesResponseSchema = z.array(entitySchema).nullable();

export type EntitySchema = z.infer<typeof entitySchema>;

// Schema for updating entities
export const updateEntityRequestSchema = z.object({
  name: z.string().min(1).optional(),
  description: z.string().min(1).optional(),
  // Include all updateable fields
});

export type UpdateEntityRequestSchema = z.infer<typeof updateEntityRequestSchema>;
```

## Step 3: Create API Routes
Create the API routes in the appropriate directory, following the pattern of your existing routes.

```typescript
// src/api/admin/entities/create-entity.ts
import { api } from "@/lib/api";
import { CreateEntityRequestSchema, entitySchema } from "@/@schemas/entity";

export async function createEntity(data: CreateEntityRequestSchema) {
  const response = await api.post("/admin/entities", data);

  return entitySchema.parse(response.data);
}
```

```typescript
// src/api/admin/entities/get-entities.ts
import { api } from "@/lib/api";
import { getEntitiesResponseSchema } from "@/@schemas/entity";

export async function getEntities() {
  const response = await api.get("/admin/entities");

  return getEntitiesResponseSchema.parse(response.data);
}
```

```typescript
// src/api/admin/entities/update-entity.ts
import { api } from "@/lib/api";
import { UpdateEntityRequestSchema, entitySchema } from "@/@schemas/entity";

export async function updateEntity(id: string, data: UpdateEntityRequestSchema) {
  const response = await api.put(`/admin/entities/${id}`, data);

  return entitySchema.parse(response.data);
}
```

```typescript
// src/api/admin/entities/delete-entity.ts
import { api } from "@/lib/api";

export async function deleteEntity(id: string) {
  await api.delete(`/admin/entities/${id}`);

  return true;
}
```

## Step 4: Create Hooks
Create hooks to integrate the API with React Query, form handling, and state management.

```typescript
// src/hooks/admin/entities/use-create-entity.ts
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { createEntityRequestSchema } from "@/@schemas/entity";
import { createEntity } from "@/api/admin/entities/create-entity";
import { useState } from "react";
import { toast } from "sonner";

export function useCreateEntity() {
  const queryClient = useQueryClient();
  const [isCreateEntitySheetOpen, setIsCreateEntitySheetOpen] = useState(false);

  const form = useForm({
    resolver: zodResolver(createEntityRequestSchema),
    defaultValues: {
      name: "",
      description: "",
      // Set default values for all fields
    },
  });

  const { mutate, isPending: isAddingEntity } = useMutation({
    mutationFn: createEntity,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["entities"] });
      form.reset();
      setIsCreateEntitySheetOpen(false);
      toast.success("Entity created successfully!");
    },
    onError: (error) => {
      toast.error("Failed to create entity.");
      console.error(error);
    },
  });

  const handleSubmitForm = form.handleSubmit((data) => {
    mutate(data);
  });

  form.handleSubmitForm = handleSubmitForm;

  return {
    form,
    isAddingEntity,
    isCreateEntitySheetOpen,
    setIsCreateEntitySheetOpen
  };
}
```

```typescript
// src/hooks/admin/entities/use-get-entities.ts
import { useQuery } from "@tanstack/react-query";
import { getEntities } from "@/api/admin/entities/get-entities";

export function useGetEntities() {
  const { data, isLoading, error } = useQuery({
    queryKey: ["entities"],
    queryFn: getEntities,
  });

  return { entities: data ?? [], isLoading, error };
}
```

```typescript
// src/hooks/admin/entities/use-update-entity.ts
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { updateEntityRequestSchema } from "@/@schemas/entity";
import { updateEntity } from "@/api/admin/entities/update-entity";
import { useState } from "react";
import { toast } from "sonner";
import { Entity } from "@/@types/entity";

export function useUpdateEntity(entity?: Entity) {
  const queryClient = useQueryClient();
  const [isUpdateEntitySheetOpen, setIsUpdateEntitySheetOpen] = useState(false);

  const form = useForm({
    resolver: zodResolver(updateEntityRequestSchema),
    defaultValues: {
      name: entity?.name ?? "",
      description: entity?.description ?? "",
      // Set default values from entity or empty
    },
  });

  const { mutate, isPending: isUpdatingEntity } = useMutation({
    mutationFn: async (data: any) => {
      if (!entity?.id) throw new Error("Entity ID is required");
      return updateEntity(entity.id, data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["entities"] });
      setIsUpdateEntitySheetOpen(false);
      toast.success("Entity updated successfully!");
    },
    onError: (error) => {
      toast.error("Failed to update entity.");
      console.error(error);
    },
  });

  const handleSubmitForm = form.handleSubmit((data) => {
    mutate(data);
  });

  form.handleSubmitForm = handleSubmitForm;

  return {
    form,
    isUpdatingEntity,
    isUpdateEntitySheetOpen,
    setIsUpdateEntitySheetOpen
  };
}
```

```typescript
// src/hooks/admin/entities/use-delete-entity.ts
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { deleteEntity } from "@/api/admin/entities/delete-entity";
import { toast } from "sonner";
import { useCallback } from "react";

export function useDeleteEntity() {
  const queryClient = useQueryClient();

  const { mutate, isPending: isLoadingDeleteEntity } = useMutation({
    mutationFn: deleteEntity,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["entities"] });
      toast.success("Entity deleted successfully!");
    },
    onError: (error) => {
      toast.error("Failed to delete entity.");
      console.error(error);
    },
  });

  const deleteEntityFn = useCallback((id: string) => {
    mutate(id);
  }, [mutate]);

  return { deleteEntityFn, isLoadingDeleteEntity };
}
```

## Step 5: Create or Update Pages
Create or update the page component for the entity.

```tsx
// src/pages/admin/entities.tsx
import { EntitiesTableContainer } from "@/components/admin/entities/table/entities-table-container";

export default function Entities() {
  return (
    <div className="flex flex-col py-4">
      <EntitiesTableContainer />
    </div>
  );
}
```

## Step 6: Create UI Components
Create the necessary UI components for CRUD operations.

### Form Components

```tsx
// src/components/admin/entities/form/entity-form.tsx
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/form-input";
import { LoaderCircle } from "lucide-react";
import { useCreateEntity } from "@/hooks/admin/entities/use-create-entity";

interface EntityFormProps {
  setIsEntitySheetOpen: (open: boolean) => void;
  mode?: "create" | "edit";
  entity?: any;
}

export function EntityForm({
  setIsEntitySheetOpen,
  mode = "create",
  entity
}: EntityFormProps) {
  const { form, isAddingEntity } = useCreateEntity();
  // If editing, use useUpdateEntity instead

  return (
    <Form {...form}>
      <div className="shadow-none border-muted rounded-lg flex flex-col gap-6">
        <form onSubmit={form.handleSubmitForm} className="space-y-12">
          <div className="grid grid-cols-3 gap-6">
            <FormInput
              form={form}
              entity="name"
              label="Name"
              placeholder="Enter entity name"
            />

            <FormInput
              form={form}
              entity="description"
              label="Description"
              placeholder="Enter entity description"
            />

            {/* Add more form fields as needed */}
          </div>

          <div className="flex justify-end gap-2">
            <Button
              className="w-full max-w-[170px]"
              variant="outline"
              onClick={() => setIsEntitySheetOpen(false)}
            >
              Cancel
            </Button>

            <Button className="w-full max-w-[170px]" type="submit">
              {isAddingEntity && (
                <LoaderCircle className="mr-2 animate-spin" />
              )}
              {!isAddingEntity && "Save"}
            </Button>
          </div>
        </form>
      </div>
    </Form>
  );
}
```

### Modal Components

```tsx
// src/components/admin/entities/modals/create-entity-sheet.tsx
import { Button } from "@/components/ui/button";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { Plus } from "lucide-react";
import { EntityForm } from "../form/entity-form";
import { useCreateEntity } from "@/hooks/admin/entities/use-create-entity";

interface CreateEntitySheetProps {
  className?: string;
}

export function CreateEntitySheet({
  className,
}: CreateEntitySheetProps) {
  const { isCreateEntitySheetOpen, setIsCreateEntitySheetOpen } =
    useCreateEntity();

  return (
    <Sheet
      open={isCreateEntitySheetOpen}
      onOpenChange={setIsCreateEntitySheetOpen}
    >
      <SheetTrigger asChild>
        <Button className={className}>
          <Plus />
          Add Entity
        </Button>
      </SheetTrigger>

      <SheetContent className="w-full md:max-w-[1000px] outline-none overflow-y-auto flex flex-col gap-6">
        <SheetHeader>
          <SheetTitle>New Entity</SheetTitle>
          <SheetDescription>Add a new entity to the system.</SheetDescription>
        </SheetHeader>

        <EntityForm
          setIsEntitySheetOpen={setIsCreateEntitySheetOpen}
          mode="create"
        />
      </SheetContent>
    </Sheet>
  );
}
```

```tsx
// src/components/admin/entities/modals/edit-entity-sheet.tsx
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet";
import { EntityForm } from "../form/entity-form";
import { useUpdateEntity } from "@/hooks/admin/entities/use-update-entity";
import { Entity } from "@/@types/entity";

interface EditEntitySheetProps {
  entity: Entity;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function EditEntitySheet({
  entity,
  open,
  onOpenChange
}: EditEntitySheetProps) {
  const { setIsUpdateEntitySheetOpen } = useUpdateEntity(entity);

  return (
    <Sheet open={open} onOpenChange={onOpenChange}>
      <SheetContent className="w-full md:max-w-[1000px] outline-none overflow-y-auto flex flex-col gap-6">
        <SheetHeader>
          <SheetTitle>Edit Entity</SheetTitle>
          <SheetDescription>Update entity information.</SheetDescription>
        </SheetHeader>

        <EntityForm
          setIsEntitySheetOpen={setIsUpdateEntitySheetOpen}
          mode="edit"
          entity={entity}
        />
      </SheetContent>
    </Sheet>
  );
}
```

```tsx
// src/components/admin/entities/modals/delete-entity-dialog.tsx
import { useDeleteEntity } from "@/hooks/admin/entities/use-delete-entity";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { LoaderCircle, Trash2, TriangleAlert } from "lucide-react";
import { DropdownMenuItem } from "@/components/ui/dropdown-menu";

interface DeleteEntityDialogProps {
  entityName: string;
  entityId: string;
}

export function DeleteEntityDialog({
  entityName,
  entityId,
}: DeleteEntityDialogProps) {
  const { deleteEntityFn, isLoadingDeleteEntity } = useDeleteEntity();

  return (
    <Dialog>
      <DialogTrigger className="w-full" asChild>
        <DropdownMenuItem
          className="text-red-500 focus:text-red-500 hover:text-red-500"
          onSelect={(e) => e.preventDefault()}
        >
          <Trash2 className="text-red-500 h-4 w-4" />
          Delete
        </DropdownMenuItem>
      </DialogTrigger>

      <DialogContent className="w-[400px]">
        <div className="flex flex-col gap-2 w-full items-center text-center">
          <div className="p-3 rounded-full bg-red-50 dark:bg-red-900 max-w-max flex ">
            <TriangleAlert className="w-8 h-8 text-red-500 dark:text-red-300" />
          </div>

          <h2 className="text-xl font-bold">Are you sure?</h2>

          <span className="text-muted-foreground text-sm">
            Are you sure you want to delete the entity{" "}
            <span className="font-bold">{entityName}</span>? This action cannot be undone.
          </span>

          <Button
            onClick={() => deleteEntityFn(entityId)}
            disabled={isLoadingDeleteEntity}
            variant="destructive"
            className="w-full mt-4 !outline-none"
          >
            {isLoadingDeleteEntity && (
              <LoaderCircle className="animate-spin" />
            )}
            Delete entity
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
```

### Table Components

```tsx
// src/components/admin/entities/table/entities-table-container.tsx
import { EntitiesTable } from "./entities-table";
import { CreateEntitySheet } from "../modals/create-entity-sheet";
import { useGetEntities } from "@/hooks/admin/entities/use-get-entities";

export function EntitiesTableContainer() {
  const { entities, isLoading } = useGetEntities();

  return (
    <div className="flex flex-col gap-4">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Entities</h1>
        <CreateEntitySheet className="ml-auto" />
      </div>

      <EntitiesTable data={entities} isLoading={isLoading} />
    </div>
  );
}
```

```tsx
// src/components/admin/entities/table/entities-table.tsx
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Entity } from "@/@types/entity";
import { EntitiesTableHeader } from "./entities-table-header";
import { EntitiesTableBody } from "./entities-table-body";
import { EntitiesTableSkeleton } from "./entities-table-skeleton";

interface EntitiesTableProps {
  data: Entity[];
  isLoading: boolean;
}

export function EntitiesTable({ data, isLoading }: EntitiesTableProps) {
  if (isLoading) {
    return <EntitiesTableSkeleton />;
  }

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <EntitiesTableHeader />
          </TableRow>
        </TableHeader>
        <TableBody>
          {data.length === 0 ? (
            <TableRow>
              <TableCell colSpan={5} className="text-center py-4">
                No entities found
              </TableCell>
            </TableRow>
          ) : (
            <EntitiesTableBody data={data} />
          )}
        </TableBody>
      </Table>
    </div>
  );
}
```

```tsx
// src/components/admin/entities/table/entities-table-header.tsx
import { translateEntityTableKeys } from "@/utils/translate-entity-table-keys";

export function EntitiesTableHeader() {
  const columns = ["name", "description", "createdAt", "actions"];

  return (
    <>
      {columns.map((column) => (
        <th key={column} className="px-4 py-2 text-left">
          {translateEntityTableKeys(column)}
        </th>
      ))}
    </>
  );
}
```

```tsx
// src/components/admin/entities/table/entities-table-body.tsx
import { TableCell, TableRow } from "@/components/ui/table";
import { Entity } from "@/@types/entity";
import { format } from "date-fns";
import { useState } from "react";
import { DotsThreeVertical } from "phosphor-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Edit } from "lucide-react";
import { DeleteEntityDialog } from "../modals/delete-entity-dialog";
import { EditEntitySheet } from "../modals/edit-entity-sheet";

interface EntitiesTableBodyProps {
  data: Entity[];
}

export function EntitiesTableBody({ data }: EntitiesTableBodyProps) {
  const [editingEntity, setEditingEntity] = useState<Entity | null>(null);

  return (
    <>
      {data.map((entity) => (
        <TableRow key={entity.id}>
          <TableCell>{entity.name}</TableCell>
          <TableCell>{entity.description}</TableCell>
          <TableCell>
            {format(new Date(entity.createdAt), "dd/MM/yyyy HH:mm")}
          </TableCell>
          <TableCell>
            <DropdownMenu>
              <DropdownMenuTrigger>
                <DotsThreeVertical size={18} />
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                <DropdownMenuItem
                  onClick={() => setEditingEntity(entity)}
                >
                  <Edit className="h-4 w-4 mr-2" />
                  Edit
                </DropdownMenuItem>
                <DeleteEntityDialog
                  entityName={entity.name}
                  entityId={entity.id}
                />
              </DropdownMenuContent>
            </DropdownMenu>

            {editingEntity?.id === entity.id && (
              <EditEntitySheet
                entity={entity}
                open={Boolean(editingEntity)}
                onOpenChange={(open) => {
                  if (!open) setEditingEntity(null);
                }}
              />
            )}
          </TableCell>
        </TableRow>
      ))}
    </>
  );
}
```

```tsx
// src/components/admin/entities/table/entities-table-skeleton.tsx
import { Skeleton } from "@/components/ui/skeleton";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { EntitiesTableHeader } from "./entities-table-header";

export function EntitiesTableSkeleton() {
  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <EntitiesTableHeader />
          </TableRow>
        </TableHeader>
        <TableBody>
          {Array.from({ length: 5 }).map((_, index) => (
            <TableRow key={index}>
              <TableCell>
                <Skeleton className="h-4 w-32" />
              </TableCell>
              <TableCell>
                <Skeleton className="h-4 w-48" />
              </TableCell>
              <TableCell>
                <Skeleton className="h-4 w-32" />
              </TableCell>
              <TableCell>
                <Skeleton className="h-4 w-8" />
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
```

## Utility Function for Table Keys Translation

```typescript
// src/utils/translate-entity-table-keys.ts
export function translateEntityTableKeys(key: string): string {
  const translations: Record<string, string> = {
    id: "ID",
    name: "Name",
    description: "Description",
    createdAt: "Created At",
    updatedAt: "Updated At",
    actions: "Actions",
  };

  return translations[key] || key;
}
```

# CRUD Implementation Checklist (feature.mdc)

Below is a checklist to implement CRUD operations for a new entity:
