---
description:
globs:
alwaysApply: false
---
```markdown
# CRUD Implementation Checklist

## Step 1: Define Types
- [ ] Create or update entity interface in `src/@types/{entity}.ts`
- [ ] Define all required properties with appropriate types

## Step 2: Create Schema
- [ ] Create schema file in `src/@schemas/{entity}.ts`
- [ ] Define create schema with validation rules
- [ ] Define entity schema for API responses
- [ ] Define update schema for edit operations
- [ ] Create type exports for all schemas

## Step 3: Create API Routes
- [ ] Create API route for creating entities (`create-{entity}.ts`)
- [ ] Create API route for fetching entities (`get-{entities}.ts`)
- [ ] Create API route for updating entities (`update-{entity}.ts`)
- [ ] Create API route for deleting entities (`delete-{entity}.ts`)

## Step 4: Create Hooks
- [ ] Create hook for creating entities (`use-create-{entity}.ts`)
- [ ] Create hook for fetching entities (`use-get-{entities}.ts`)
- [ ] Create hook for updating entities (`use-update-{entity}.ts`)
- [ ] Create hook for deleting entities (`use-delete-{entity}.ts`)

## Step 5: Create or Update Pages
- [ ] Create or update page component in appropriate directory
- [ ] Import and use appropriate table container component

## Step 6: Create UI Components
### Form Components
- [ ] Create entity form component for creation/editing

### Modal Components
- [ ] Create sheet component for entity creation
- [ ] Create sheet component for entity editing
- [ ] Create dialog component for entity deletion

### Table Components
- [ ] Create table container component
- [ ] Create main table component
- [ ] Create table header component
- [ ] Create table body component
- [ ] Create table skeleton component for loading state

## Step 7: Create Utility Functions
- [ ] Create translation utility for table keys

## Final Checks
- [ ] Verify all components are properly connected
- [ ] Test CRUD operations end-to-end
- [ ] Ensure error handling is implemented
- [ ] Check for proper loading states
- [ ] Verify form validation works correctly
```
